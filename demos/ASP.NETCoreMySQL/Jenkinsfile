node('docker') {

    stage 'Checkout'
        checkout scm

    stage 'Build & UnitTest'
        sh "cd demos/ASP.NETCoreMySQL/ && docker build -t accountownerapp:B${BUILD_NUMBER} -f Dockerfile ."
        sh "cd demos/ASP.NETCoreMySQL/ && docker build -t accountownerapp:test-B${BUILD_NUMBER} -f Dockerfile.Integration ."

    stage 'Pusblish UT Reports'
        containerID = sh (script: "cd demos/ASP.NETCoreMySQL/ && docker run -d accountownerapp:B${BUILD_NUMBER}", returnStdout: true).trim()
        echo "Container ID is ==> ${containerID}"
        sh "cd demos/ASP.NETCoreMySQL/ && docker cp ${containerID}:/TestResults/test_results.xml test_results.xml"
        sh "cd demos/ASP.NETCoreMySQL/ && docker stop ${containerID}"
        sh "cd demos/ASP.NETCoreMySQL/ && docker rm ${containerID}"
        step([$class: 'MSTestPublisher', failOnError: false, testResultsFile: 'demos/ASP.NETCoreMySQL/test_results.xml'])

    stage 'Integration Test'
        //sh 'docker-compose -f docker-compose.integration.yml up'
        sh "cd demos/ASP.NETCoreMySQL/ && docker-compose -f docker-compose.integration.yml up --force-recreate --abort-on-container-exit"
        sh "cd demos/ASP.NETCoreMySQL/ && docker-compose -f docker-compose.integration.yml down -v"
}
